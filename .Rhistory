library(devtools)
document()
library(DMPC)
document()
install.packages("doParallel")
library(roxygen2)
document()
library(DMPC)
library(DMPC)
parallel::stopCluster
### Stop cluster
parallel::stopCluster(cl)
library(DMPC)
document()
load_all()
document()
library(devtools)
library(roxygen2)
devtools::load_all(".")
library(DMPC)
devtools::check()
#'@param prev.list List phyloseq objects with the calculated prevalences for each cutoff
#'@param variable Variable to run the model
#'@param method.dist Distance/dissimilarity. Default is Bray-Curtis. Suported mesurements from vegan::vegdist()
#'@keywords prevalence permanova OOB
#'@examples phylist=pime.split.by.variable(restroom, "Environment")
#' prev=pime.prevalence(phylist)
#' pime.best.prevalence(prev, "Environment", method.dist="bray")
#' @importFrom phyloseq "otu_table"
#' @importFrom phyloseq "sample_data"
#'@export
pime.best.prevalence = function (prev.list, variable, method.dist="bray",...) {
set.seed(2125)
perm=list()
randon=list()
gs <- as(object = sample_data(prev.list[[1]]), Class = "data.frame")
Variable = as.factor(gs[, variable])
for (i in prev.list){
if ((phyloseq::taxa_are_rows(i)==TRUE)==TRUE){
train=t(otu_table(i))
} else {
train=otu_table(i)}
d=vegan::vegdist(train, method = method.dist)
adonis=vegan::adonis(d ~ Variable, data = gs)
perm[[length(perm)+1]]=adonis[[1]]
print("Calculating...")
response = Variable
# Combine them into 1 data frame
training.set <- data.frame(response, train)
train.model = ranger::ranger(response ~ ., data = training.set,...)
randon[[length(randon)+1]]=train.model$prediction.error
print("Done")
}
#names tables from Lista as the names of the tables inside list.core
names(perm) <- paste("Prevalence", names(prev.list))
#gets only the first line, all columns of every table inside Lista
results1 <- do.call(rbind, lapply(perm,`[`,1,))
Interval= paste(as.numeric(names(prev.list)), "%", sep = "")
results2 <- do.call(rbind, randon)
Nseqs=sapply(prev.list, function(z) sum(phyloseq::sample_sums(z)))
OTUs=sapply(prev.list, phyloseq::ntaxa)
OOB.err=cbind(results1,results2,Interval,OTUs,Nseqs)
return(OOB.err)
}
library(DMPC)
library(devtools)
devtools::document()
library(pime)
library(devtools)
library(roxygen2)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
help("suppressForeignCheck")
devtools::check()
devtools::check(args = --no-examples)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check(args = --no-examples)
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
