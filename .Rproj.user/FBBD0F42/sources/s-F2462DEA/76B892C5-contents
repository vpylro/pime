---
title: "DMPC"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{DMPC}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
## How to install and use DMPC package

To install DMPC Package first install the devtools package, install.packages("devtools"). Then run
install_github("microEcology/pime")
pime uses a Phyloseq object as input. 

##This function will be used to predict the likelihood of KIDMED index diet categories to influence the saliva's microbiome.
The prediction using random forests trees on full dataset. Results in Out of Bag erro
```{r}
library(pime)
data("restroom")
pime.oob.error(restroom, "Environment")
```
If the OOB error rate <=0.1, the dataset present large differences, and pime might not be necessary. 
If the OOB error rate is greater, next functions will find the best prevalence interval for the dataset.
This function takes two parameters: The phyloseq object (restroom) and the predictor variable (Environment).

## Split the dataset by predictor variable
Two parameters are required to run this function: The phyloseq object (restroom) and the predictor variable (Environment).
```{r}
per_variable_obj= pime.split.by.variable(restroom, "Environment")
per_variable_obj
```

## Calculate the highest possible prevalence cutoffs
This function calculates prevalence for different intervals values by increments of 5. 
The input file is the output from the DMPC.split.by.variable (per_variable_obj)
```{r}
prevalences=pime.prevalence(per_variable_obj)
prevalences
```

## Calculates the best prevalence cutoff for the dataset 
This function will return a table with PERMANOVA  and random forests results for each prevalence cutoff.
The best prevalence cutoff value provides the clearest separation of communities while still including a majority of the taxa in the analysis. If true differences are present.
It will be represented by the first interval in which the OOB error rate is zero, or the lowest.
The input file is the list of prevalences generated by the DMPC.prevalence (prevalences) and the predictor variable (Environment).
```{r}
pime.best.prevalence(prevalences, "Environment")
```
## Within this dataset the best prevalence cutoff was 60%
To obtain the phyloseq object at this cutoff use the following command.

```{r}
prevalence.60 = prevalences$`60`
prevalence.60
```
## Estimating prediction error
To estimate error in prediction, is possible to use pime.error.prediction() to randomly assign treatmens to samples and run random forests classification on each prevalence interval. Function results in a boxplot figure with a table results of each classificaiton error.
```{r}
#randomized=pime.error.prediction(restroom, "Environment", bootstrap = 10, parallel = TRUE, max.prev = 95)
#randomized$Plot
#randomized$`Table results'
```
It is also possible to estimate the variation in OOB error with each prevalence interval fintering. It runs the random forests classification for a n times, determined by the user, and results in a boxplot figure with a table results of each classificaiton error.
```{r}
replicated.oob.error= pime.oob.replicate(prevalences, "Environment", bootstrap = 10, parallel = TRUE)
